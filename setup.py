#!/usr/bin/env python3
"""
Script de configuration pour le Multi-Agent System avec Agno
Installe et configure Ollama avec les mod√®les n√©cessaires
"""

import subprocess
import sys
import time
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

def run_command(command: str, description: str = "") -> bool:
    """Ex√©cute une commande shell avec gestion d'erreur"""
    try:
        if description:
            console.print(f"[blue]üîÑ {description}[/blue]")
        
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            timeout=300  # 5 minutes timeout
        )
        
        if result.returncode == 0:
            console.print(f"[green]‚úÖ {description or 'Commande'} r√©ussie[/green]")
            return True
        else:
            console.print(f"[red]‚ùå Erreur: {result.stderr}[/red]")
            return False
            
    except subprocess.TimeoutExpired:
        console.print(f"[red]‚ùå Timeout: {description}[/red]")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå Erreur: {e}[/red]")
        return False

def check_ollama_installed() -> bool:
    """V√©rifie si Ollama est install√©"""
    result = subprocess.run("ollama --version", shell=True, capture_output=True)
    return result.returncode == 0

def install_ollama():
    """Installe Ollama selon l'OS"""
    console.print(Panel.fit(
        "[bold blue]üöÄ Installation d'Ollama[/bold blue]",
        border_style="blue"
    ))
    
    if sys.platform == "darwin":  # macOS
        console.print("[yellow]üì± D√©tection de macOS[/yellow]")
        console.print("[dim]Veuillez installer Ollama manuellement depuis: https://ollama.ai[/dim]")
        console.print("[dim]Ou utilisez: brew install ollama[/dim]")
        return False
    elif sys.platform.startswith("linux"):  # Linux
        console.print("[yellow]üêß D√©tection de Linux[/yellow]")
        return run_command(
            "curl -fsSL https://ollama.ai/install.sh | sh",
            "Installation d'Ollama sur Linux"
        )
    else:
        console.print("[red]‚ùå OS non support√© pour l'installation automatique[/red]")
        return False

def pull_models():
    """T√©l√©charge les mod√®les Ollama n√©cessaires"""
    console.print(Panel.fit(
        "[bold blue]üì• T√©l√©chargement des mod√®les[/bold blue]",
        border_style="blue"
    ))
    
    models = [
        "mistral:latest",      # Mod√®le principal
        "llama3.2:3b",         # Alternative l√©g√®re
        "phi3:mini",           # Pour le code
    ]
    
    success = True
    for model in models:
        console.print(f"[blue]üì¶ T√©l√©chargement du mod√®le: {model}[/blue]")
        if not run_command(f"ollama pull {model}", f"T√©l√©chargement de {model}"):
            console.print(f"[yellow]‚ö†Ô∏è √âchec du t√©l√©chargement de {model}[/yellow]")
            success = False
        time.sleep(1)  # Pause entre les t√©l√©chargements
    
    return success

def install_python_deps():
    """Installe les d√©pendances Python"""
    console.print(Panel.fit(
        "[bold blue]üêç Installation des d√©pendances Python[/bold blue]",
        border_style="blue"
    ))
    
    # V√©rifier si uv est disponible
    if subprocess.run("uv --version", shell=True, capture_output=True).returncode == 0:
        return run_command("uv sync", "Installation avec uv")
    else:
        return run_command("pip install -r requirements.txt", "Installation avec pip")

def test_setup():
    """Test la configuration"""
    console.print(Panel.fit(
        "[bold blue]üß™ Test de la configuration[/bold blue]",
        border_style="blue"
    ))
    
    # Test Ollama
    if not run_command("ollama list", "Test d'Ollama"):
        return False
    
    # Test des imports Python
    try:
        import agno
        import ollama
        import typer
        import rich
        console.print("[green]‚úÖ Imports Python OK[/green]")
        return True
    except ImportError as e:
        console.print(f"[red]‚ùå Import manquant: {e}[/red]")
        return False

def main():
    """Fonction principale de setup"""
    console.print(Panel.fit(
        "[bold green]ü§ñ Setup Multi-Agent System avec Agno[/bold green]\n"
        "[dim]Configuration automatique d'Ollama et des d√©pendances[/dim]",
        border_style="green"
    ))
    
    steps = []
    
    # V√©rifier Ollama
    if not check_ollama_installed():
        console.print("[yellow]‚ö†Ô∏è Ollama n'est pas install√©[/yellow]")
        if not install_ollama():
            console.print("[red]‚ùå Installation d'Ollama √©chou√©e[/red]")
            console.print("[dim]Installez manuellement depuis: https://ollama.ai[/dim]")
            return False
        steps.append("‚úÖ Ollama install√©")
    else:
        console.print("[green]‚úÖ Ollama d√©j√† install√©[/green]")
        steps.append("‚úÖ Ollama d√©tect√©")
    
    # Installer les d√©pendances Python
    if install_python_deps():
        steps.append("‚úÖ D√©pendances Python install√©es")
    else:
        console.print("[red]‚ùå Installation des d√©pendances √©chou√©e[/red]")
        return False
    
    # T√©l√©charger les mod√®les
    if pull_models():
        steps.append("‚úÖ Mod√®les t√©l√©charg√©s")
    else:
        console.print("[yellow]‚ö†Ô∏è Certains mod√®les n'ont pas pu √™tre t√©l√©charg√©s[/yellow]")
        steps.append("‚ö†Ô∏è Mod√®les partiellement t√©l√©charg√©s")
    
    # Test final
    if test_setup():
        steps.append("‚úÖ Configuration test√©e")
    else:
        console.print("[red]‚ùå Test de configuration √©chou√©[/red]")
        return False
    
    # R√©sum√©
    console.print(Panel(
        "\n".join(steps) + "\n\n[bold green]üéâ Configuration termin√©e![/bold green]",
        title="[bold blue]R√©sum√© de l'installation[/bold blue]",
        border_style="green"
    ))
    
    console.print("\n[bold cyan]üöÄ Commandes disponibles:[/bold cyan]")
    console.print("[dim]python main.py list-agents[/dim] - Liste les agents")
    console.print("[dim]python main.py chat --agent general[/dim] - Chat avec l'agent g√©n√©ral")
    console.print("[dim]python main.py demo[/dim] - D√©monstration rapide")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã Installation interrompue[/yellow]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]‚ùå Erreur inattendue: {e}[/red]")
        sys.exit(1) 