"""
Configuration centralis√©e pour le Multi-Agent System
"""

from dataclasses import dataclass
from typing import Dict, List, Optional
from pathlib import Path

@dataclass
class ModelConfig:
    """Configuration des mod√®les Ollama"""
    default_model: str = "mistral:latest"
    available_models: List[str] = None
    temperature: float = 0.1
    max_tokens: Optional[int] = None
    
    def __post_init__(self):
        if self.available_models is None:
            self.available_models = [
                "mistral:latest",
                "llama3.2:3b",
                "llama3.2:latest", 
                "phi3:mini",
                "my-phi3:latest"
            ]

@dataclass
class AgentConfig:
    """Configuration d'un agent sp√©cifique"""
    name: str
    description: str
    instructions: List[str]
    tools: List[str]
    emoji: str
    specialized_model: Optional[str] = None

class AgentsConfig:
    """Configuration de tous les agents"""
    
    AGENTS: Dict[str, AgentConfig] = {
        "general": AgentConfig(
            name="GeneralAgent",
            description="Assistant g√©n√©ral intelligent",
            emoji="ü§ñ",
            instructions=[
                "Tu es un assistant g√©n√©ral intelligent et serviable.",
                "R√©ponds aux questions de culture g√©n√©rale avec pr√©cision.",
                "Fournis des explications claires et p√©dagogiques.",
                "Si tu as besoin d'outils sp√©cialis√©s, recommande l'agent appropri√©.",
                "Sois concis mais complet dans tes r√©ponses."
            ],
            tools=[]
        ),
        
        "search": AgentConfig(
            name="SearchAgent", 
            description="Expert en recherche d'informations sur le web",
            emoji="üîç",
            instructions=[
                "Tu es un expert en recherche d'informations sur le web.",
                "Utilise DuckDuckGo pour trouver des informations pr√©cises et r√©centes.",
                "Fournis des r√©ponses d√©taill√©es avec des sources quand possible.",
                "R√©sume les informations importantes de mani√®re claire et structur√©e.",
                "V√©rifie la cr√©dibilit√© des sources trouv√©es."
            ],
            tools=["duckduckgo"]
        ),
        
        "finance": AgentConfig(
            name="FinanceAgent",
            description="Analyste financier expert", 
            emoji="üí∞",
            instructions=[
                "Tu es un analyste financier expert et exp√©riment√©.",
                "Utilise YFinance pour obtenir des donn√©es financi√®res pr√©cises et √† jour.",
                "Analyse les tendances et fournis des insights pertinents sur les march√©s.",
                "Pr√©sente les donn√©es sous forme de tableaux quand c'est appropri√©.",
                "Explique les concepts financiers de mani√®re accessible.",
                "Inclus toujours des avertissements sur les risques d'investissement."
            ],
            tools=["yfinance"]
        ),
        
        "code": AgentConfig(
            name="CodeAgent",
            description="Expert en programmation et calculs",
            emoji="üíª", 
            instructions=[
                "Tu es un expert en programmation et en r√©solution de probl√®mes techniques.",
                "Utilise Python pour r√©soudre des probl√®mes complexes et effectuer des calculs.",
                "√âcris du code propre, bien document√© et suivant les bonnes pratiques.",
                "Explique tes solutions √©tape par √©tape avec des commentaires clairs.",
                "Teste ton code mentalement avant de le proposer.",
                "Propose des alternatives et optimisations quand c'est pertinent."
            ],
                         tools=["python"],
             specialized_model="mistral:latest"
        ),
        
        "system": AgentConfig(
            name="SystemAgent",
            description="Administrateur syst√®me expert",
            emoji="‚öôÔ∏è",
            instructions=[
                "Tu es un administrateur syst√®me expert et prudent.",
                "Utilise les commandes shell pour des t√¢ches syst√®me appropri√©es.",
                "TOUJOURS expliquer ce que font les commandes avant de les ex√©cuter.",
                "Sois extr√™mement prudent avec les commandes destructives.",
                "Propose des alternatives s√ªres quand possible.",
                "V√©rifie les permissions et la s√©curit√© avant d'agir."
            ],
            tools=["shell"]
        )
    }
    
    TEAM_CONFIG = {
        "name": "AgentTeam",
        "description": "√âquipe collaborative d'experts sp√©cialis√©s",
        "emoji": "üë•",
        "instructions": [
            "Vous √™tes une √©quipe d'experts sp√©cialis√©s travaillant ensemble.",
            "Collaborez efficacement pour r√©soudre des probl√®mes complexes.",
            "Chaque agent utilise ses comp√©tences sp√©cialis√©es au bon moment.",
            "Partagez les informations pertinentes entre vous.",
            "Coordonnez vos efforts pour fournir une r√©ponse compl√®te.",
            "√âvitez les redondances et maximisez la compl√©mentarit√©."
        ]
    }

@dataclass 
class AppConfig:
    """Configuration g√©n√©rale de l'application"""
    app_name: str = "Multi-Agent System avec Agno"
    version: str = "1.0.0"
    author: str = "Local Agent Team"
    
    # Chemins
    base_dir: Path = Path(__file__).parent
    logs_dir: Path = base_dir / "logs"
    data_dir: Path = base_dir / "data"
    
    # Logging
    log_level: str = "INFO"
    log_format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # Interface
    max_response_length: int = 2000  # Pour l'affichage tronqu√©
    show_tool_calls: bool = True
    markdown_output: bool = True
    
    # Ollama
    ollama_host: str = "http://localhost:11434"
    ollama_timeout: int = 300  # 5 minutes
    
    def __post_init__(self):
        # Cr√©er les dossiers n√©cessaires
        self.logs_dir.mkdir(exist_ok=True)
        self.data_dir.mkdir(exist_ok=True)

# Instances globales
MODEL_CONFIG = ModelConfig()
AGENTS_CONFIG = AgentsConfig()
APP_CONFIG = AppConfig()

# Utilitaires
def get_agent_config(agent_id: str) -> Optional[AgentConfig]:
    """R√©cup√®re la configuration d'un agent"""
    return AGENTS_CONFIG.AGENTS.get(agent_id)

def list_available_agents() -> Dict[str, str]:
    """Liste les agents disponibles avec leurs descriptions"""
    agents = {
        agent_id: f"{config.emoji} {config.description}"
        for agent_id, config in AGENTS_CONFIG.AGENTS.items()
    }
    agents["team"] = f"{AGENTS_CONFIG.TEAM_CONFIG['emoji']} {AGENTS_CONFIG.TEAM_CONFIG['description']}"
    return agents

def get_model_for_agent(agent_id: str) -> str:
    """R√©cup√®re le mod√®le recommand√© pour un agent"""
    config = get_agent_config(agent_id)
    if config and config.specialized_model:
        return config.specialized_model
    return MODEL_CONFIG.default_model 